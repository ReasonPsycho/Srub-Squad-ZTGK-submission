name: C++ CMake CI

on:
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    name: Test build
    runs-on: windows-latest

    steps:
        
      - name: Support longpaths
        run: git config --system core.longpaths true

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache vcpkg packages
        uses: actions/cache@v2
        with:
          path: vcpkg_installed
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}

      - name: Restore vcpkg packages
        run: |
          if [ -d "vcpkg_installed" ]; then
            cp -r vcpkg_installed/. .
          fi

      - name: Integrate installed vcpkg packages
        run: vcpkg integrate install
        
      - name: Configure CMake
        run: cmake -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -B  ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}     
      
      - name: Create Symbolic Link To Resources
        run: New-Item -ItemType SymbolicLink -Path "${{github.workspace}}/build/Debug/res" -Target "${{github.workspace}}/res"

      - name: Archive Debug directory
        run: |
          Compress-Archive -Path "${{github.workspace}}/build/Debug/*" -DestinationPath "${{github.workspace}}/build/Debug.zip"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
        with:
          tag_name: automatic-release-${{ github.run_number }}
          release_name: Automatic release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/build/Debug.zip
          asset_name: Debug-build.zip
          asset_content_type: application/zip

      - name: Save vcpkg packages
        if: success()
        run: |
          mkdir -p vcpkg_installed
          cp -r vcpkg_installed/. .
